
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user has a specific role for a given corps data owner.
    function hasRole(ownerId, role) {
      // Early exit if permissions map doesn't exist
      if (!exists(/databases/$(database)/documents/users/$(ownerId))) {
        return false;
      }
      let permissions = get(/databases/$(database)/documents/users/$(ownerId)).data.settings.permissions;
      return request.auth.uid in permissions && permissions[request.auth.uid].role == role;
    }
    
    // Helper function to check if a user is the owner of the data.
    function isOwner(ownerId) {
      return request.auth.uid == ownerId;
    }
    
    // Helper function to check if a user has any access to the data.
    function hasAccess(ownerId) {
      if (!exists(/databases/$(database)/documents/users/$(ownerId))) {
        return false;
      }
      let permissions = get(/databases/$(database)/documents/users/$(ownerId)).data.settings.permissions;
      return request.auth.uid in permissions;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow a user to read their own document.
      // Also, allow any user with access to read the data owner's document.
      allow read: if request.auth.uid == userId || hasAccess(userId);

      // A user can create their own document on signup.
      allow create: if request.auth.uid == userId;
      
      // A user can update their own document, BUT only to set the 'pointerToCorpsData' field when accepting an invite.
      // The owner or an editor can update the full corps data document.
      allow write: if (request.auth.uid == userId && request.resource.data.keys().hasOnly(['pointerToCorpsData'])) ||
                      (isOwner(userId) || hasRole(userId, 'editor'));
    }
    
    // Rules for the 'invites' collection
    match /invites/{inviteId} {
      // Any authenticated user can create an invitation.
      allow create: if request.auth.uid != null;
      
      // An invited user can update an invite to "accepted".
      // The data owner can update an invite to "processed".
      allow update: if (request.auth.token.email == resource.data.inviteeEmail && request.resource.data.status == 'accepted') ||
                       (request.auth.uid == resource.data.corpsDataOwnerId && request.resource.data.status == 'processed');
      
      // The data owner or the invited user can read the invite.
      allow read: if request.auth.uid == resource.data.corpsDataOwnerId ||
                     request.auth.token.email == resource.data.inviteeEmail;
    }
  }
}
