rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /corps/{corpsId} {
      function isMember() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.corpsId == corpsId;
      }
      
      // Allow create if the user does not have a corpsId yet
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.corpsId == null;
      
      // Allow read/write if the user's corpsId matches this document's ID
      allow read, update, delete: if isMember();
    }

    match /invites/{email} {
      // An existing member of the target corps can create an invite.
      function isCreatorMember() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.corpsId == request.resource.data.corpsId;
      }

      allow create: if isCreatorMember();

      // Only the invited user can read or delete their own invite.
      allow read, delete: if request.auth != null && request.auth.token.email == email;
    }
  }
}
