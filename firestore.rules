
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      // A user can read their own document.
      // A user can also read another user's document (the "owner's" document) 
      // if their own UID is listed in that document's permissions map.
      allow read: if request.auth.uid == userId || 
                   request.auth.uid in resource.data.settings.permissions;

      // A user can only create their own document.
      allow create: if request.auth.uid == userId;

      // A user can update their own document (e.g., to add a pointer to shared data).
      // A user can also update an owner's document if they are listed in the permissions
      // map with the role of 'owner' or 'editor'.
      allow update: if request.auth.uid == userId || 
                     (request.auth.uid in resource.data.settings.permissions && 
                      resource.data.settings.permissions[request.auth.uid].role in ['owner', 'editor']);
    }
    
    match /invites/{inviteId} {
      // Any authenticated user can create an invite. 
      // The app's own logic should restrict this action to data owners.
      allow create: if request.auth.uid != null;
      
      // An invite can be read or updated by the owner who sent it, or the person it was sent to.
      // This rule structure is compatible with the client-side queries being made.
      allow read, update: if request.auth.uid == resource.data.corpsDataOwnerId || 
                           (request.auth.token.email != null && request.auth.token.email == resource.data.inviteeEmail);
    }
  }
}
